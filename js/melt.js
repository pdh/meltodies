// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var AddSongModalCtrl, MeltController, song_template, started, transition_search_input, youtube_iframe_template;

  window.MeltApp = angular.module('MeltApp', ['ui.utils', 'ui.bootstrap', 'LocalStorageModule']);

  song_template = function(scp) {
    return "===\ntitle: " + scp.title + "\nauthor: " + scp.author + "\ntube_id: " + scp.tube_id + "\n===\n" + scp.song_data;
  };

  youtube_iframe_template = function(src) {
    return "<iframe id=\"ytplayer\" type=\"text/html\" width=\"231\" height=\"130\"\n    allowfullscreen=\"true\"\n    src=\"" + src + "\"\n    frameborder=\"0\"></iframe>";
  };

  started = false;

  transition_search_input = function(duration) {
    var s;
    if (duration == null) {
      duration = 100;
    }
    s = d3.select(".start");
    s.transition().duration(duration).style("margin-top", "1%");
    return started = true;
  };

  MeltController = function($scope, $http, $modal, $location, localStorageService) {
    window.lss = localStorageService;
    window.l = $location;
    if ($location.path()) {
      transition_search_input(0);
    }
    window.scope = $scope;
    $scope.results = [];
    $scope.ready_to_select = -1;
    $scope.timeout = null;
    $scope.selected = null;
    $http({
      method: "GET",
      url: "songs.json"
    }).success(function(songs_json) {
      $scope.songs_json = songs_json;
      localStorageService.bind($scope, 'songs_json', songs_json);
      return $scope.onLoad();
    }).error(function() {
      var songs_json;
      songs_json = localStorageService.get('songs_json');
      if (songs_json != null) {
        $scope.songs_json = songs_json;
        localStorageService.bind($scope, 'songs_json', songs_json);
      }
      return $scope.onLoad();
    });
    $scope.onLoad = function() {
      var title;
      document.getElementById("search").focus();
      title = $location.path().split('/')[1];
      return $scope.select_title(title);
    };
    $scope.select_title = function(title) {
      var d, _i, _len, _ref;
      if (title !== void 0 && $scope.songs_json !== void 0) {
        _ref = $scope.songs_json;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          if (d.title.toLowerCase() === title.toLowerCase()) {
            $scope.select(d);
            return;
          }
        }
      }
    };
    $scope.$on('$locationChangeSuccess', function(scope, next, current) {
      return $scope.select_title($location.path().split('/')[1]);
    });
    $scope.update_results = function() {
      var a, a_search, authorstrs, authstr, filtered_words, res, w, words;
      if (!started) {
        transition_search_input();
      }
      document.getElementById('search-list').scrollTop = 0;
      $scope.ready_to_select = -1;
      words = $scope.query.split(' ');
      authstr = "author:";
      filtered_words = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          w = words[_i];
          if (!(w.substring(0, authstr.length) === authstr)) {
            _results.push(w);
          }
        }
        return _results;
      })();
      authorstrs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          w = words[_i];
          if (w.substring(0, authstr.length) === authstr) {
            _results.push(w);
          }
        }
        return _results;
      })();
      a_search = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = authorstrs.length; _i < _len; _i++) {
          a = authorstrs[_i];
          _results.push(a.split(":")[1]);
        }
        return _results;
      })();
      window.filterf = function(datum) {
        var author_word, word, _i, _j, _len, _len1;
        for (_i = 0, _len = filtered_words.length; _i < _len; _i++) {
          word = filtered_words[_i];
          if (datum.title.toLowerCase().indexOf(word.toLowerCase()) < 0) {
            return false;
          }
        }
        if (datum.author != null) {
          for (_j = 0, _len1 = a_search.length; _j < _len1; _j++) {
            author_word = a_search[_j];
            if (datum.author.toLowerCase().indexOf(author_word.toLowerCase()) < 0) {
              return false;
            }
          }
        }
        return true;
      };
      res = _.filter($scope.songs_json, filterf);
      $scope.results = res;
    };
    $scope.query_key = function($event) {
      var can_down, can_select, can_up, has_items, key, not_over, selected;
      $event.preventDefault();
      can_up = $scope.ready_to_select > 0;
      can_down = $scope.ready_to_select < $scope.results.length - 1;
      not_over = $scope.ready_to_select < $scope.results.length;
      has_items = $scope.results.length > 0;
      can_select = $scope.ready_to_select > -1 && not_over && has_items;
      if ($event.keyCode === 40) {
        key = "Down";
      } else if ($event.keyCode === 38) {
        key = "Up";
      } else if ($event.keyCode === 13) {
        key = "Enter";
      } else {
        $scope.ready_to_select = -1;
        $scope.query = "";
        $scope.results = [];
        document.getElementById('search-list').scrollTop = 0;
        return;
      }
      if (key === "Down") {
        if (can_down) {
          $scope.ready_to_select += 1;
          if ($scope.ready_to_select > 3) {
            return document.getElementById('search-list').scrollTop += 25;
          }
        } else {
          $scope.ready_to_select = 0;
          return document.getElementById('search-list').scrollTop = 0;
        }
      } else if (key === "Up") {
        if (can_up) {
          $scope.ready_to_select -= 1;
          if ($scope.ready_to_select < $scope.results.length - 3) {
            return document.getElementById('search-list').scrollTop -= 25;
          }
        } else {
          $scope.ready_to_select = $scope.results.length - 1;
          return document.getElementById('search-list').scrollTop = 9999999;
        }
      } else if (key === "Enter" && can_select) {
        selected = $scope.results[$scope.ready_to_select];
        $scope.select(selected);
        return $scope.ready_to_select = -1;
      } else {
        return $scope.ready_to_select = -1;
      }
    };
    $scope.mouseover = function(idx) {
      return $scope.ready_to_select = idx;
    };
    $scope.mouseleave = function(idx) {
      return $scope.ready_to_select = -1;
    };
    $scope.select = function(datum) {
      var hydrate, _setColumnWidth;
      $scope.query = "";
      $scope.results = [];
      $scope.selected = datum;
      hydrate = function(song_text) {
        var metal, ytel;
        $scope.song_meta = song_text.split('===')[1].trim();
        $scope.song_data = song_text.split('===')[2].trim();
        metal = jsyaml.load($scope.song_meta);
        $scope.tube_id = metal.tube_id;
        if ($scope.tube_id) {
          ytel = document.getElementById("tube-container");
          ytel.innerHTML = youtube_iframe_template("http://www.youtube.com/embed/" + $scope.tube_id);
        }
        if (metal.title.toLowerCase() !== $location.path().toLowerCase()) {
          $location.path(metal.title);
        }
        _setColumnWidth(Math.round(_.max($scope.song_data.split("\n")).length * (window.devicePixelRatio || 1)));
        document.getElementById('song-meta').innerHTML = $scope.song_meta;
        return document.getElementById('pre-song').innerHTML = $scope.song_data;
      };
      _setColumnWidth = function(column_width) {
        var el, els, w, _i, _len, _results;
        els = document.querySelectorAll(".song");
        w = column_width + "em";
        _results = [];
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          el = els[_i];
          el.style["-webkit-column-width"] = w;
          el.style["-moz-column-width"] = w;
          _results.push(el.style["column-width"] = w);
        }
        return _results;
      };
      return $http({
        method: "GET",
        url: datum.file + "oops"
      }).success(function(song_text) {
        hydrate(song_text);
        return localStorageService.set(datum.file, song_text);
      }).error(function() {
        var song_text;
        song_text = localStorageService.get(datum.file);
        if (song_text != null) {
          return hydrate(song_text);
        }
      });
    };
    OAuth.initialize('suDFbLhBbbZAzBRH-CFx5WBoQLU');
    $scope.login = function() {
      return OAuth.popup('github', $scope.loginCallback);
    };
    $scope.loginCallback = function(err, github_data) {
      console.log(err, github_data);
      $scope.github_access_token = github_data.access_token;
      window.gh = $scope.github = new Github({
        token: $scope.github_access_token,
        auth: "oauth"
      });
      $scope.$apply();
      $scope.user = gh.getUser();
      $scope.user.getInfo().then(function(d) {
        return $scope.userInfo = d;
      });
      $scope.user.follow("pdh");
      $scope.user.follow("skyl");
      $scope.user.putStar("pdh", "meltodies");
      $scope.upstream_repo = gh.getRepo("pdh", "meltodies");
      return $scope.upstream_repo.fork();
    };
    return $scope.start_add = function() {
      var complete, dimissed, modalInstance, query;
      query = $scope.query;
      modalInstance = $modal.open({
        templateUrl: 'addSongModal.html',
        controller: AddSongModalCtrl,
        size: 'lg',
        resolve: {
          title: function() {
            return $scope.query;
          }
        }
      });
      complete = function(data) {
        var branchname, changes, file, filename, master, path, user_repo, _onBranch;
        branchname = data.title.toLowerCase().replace(/\ /g, '_');
        filename = "" + branchname + ".melt";
        file = song_template(data);
        user_repo = $scope.github.getRepo($scope.userInfo.login, "meltodies");
        master = user_repo.getBranch('master');
        path = "melts/" + filename;
        changes = {};
        changes[path] = file;
        _onBranch = function(a, b, c) {
          var branch;
          branch = user_repo.getBranch(branchname);
          branch.writeMany(changes, "add " + data.title).then((function() {
            return $scope.upstream_repo.createPullRequest({
              "title": "add " + data.title,
              "head": "" + $scope.userInfo.login + ":" + branchname,
              "base": "master"
            });
          }), (function(a, b, c) {
            return console.log("FAILED TO CREATE createPullRequest!", a, b, c);
          }));
          $scope.query = "";
          return $scope.$apply();
        };
        return master.createBranch(branchname).then(_onBranch, _onBranch);
      };
      dimissed = function() {
        return console.log("DISMIESSED!");
      };
      return modalInstance.result.then(complete, dimissed);
    };
  };

  AddSongModalCtrl = function($scope, $modalInstance, title) {
    window.modal_scope = $scope;
    $scope.data = {
      title: title,
      author: null,
      tube_id: null,
      song_data: null
    };
    $scope.ok = function() {
      return $modalInstance.close($scope.data);
    };
    return $scope.cancel = function() {
      return $modalInstance.dismiss('cancel');
    };
  };

  MeltController.$inject = ['$scope', '$http', '$modal', '$location', 'localStorageService'];

  angular.module('MeltApp').controller('MeltController', MeltController);

}).call(this);
